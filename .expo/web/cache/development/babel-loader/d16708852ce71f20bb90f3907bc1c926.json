{"ast":null,"code":"import axios from \"axios\";\nvar citiesActions = {\n  fetchCities: function fetchCities(props) {\n    return function (dispatch, getState) {\n      axios.get(\"https://mytinerary-dalessio.herokuapp.com/api/cities\").then(function (response) {\n        return response.data.success ? dispatch({\n          type: 'FETCH_CITIES',\n          payload: response.data\n        }) : dispatch({\n          type: 'FETCH_CITIES',\n          payload: props.history.push('/error')\n        });\n      });\n    };\n  },\n  fetchSingleCity: function fetchSingleCity(id, props) {\n    return function (dispatch, getState) {\n      axios.get(\"https://mytinerary-dalessio.herokuapp.com/api/city/\" + id).then(function (response) {\n        return dispatch({\n          type: 'FETCH_SINGLE_CITY',\n          payload: response.data\n        });\n      });\n    };\n  },\n  findCity: function findCity(e) {\n    return function (dispatch, getState) {\n      dispatch({\n        type: 'FIND_CITY',\n        payload: e\n      });\n    };\n  }\n};\nexport default citiesActions;","map":{"version":3,"sources":["C:/Users/Craig133Mhz/Desktop/programacion/REACT NATIVE/MyTinerary Mobile/redux/actions/citiesActions.js"],"names":["axios","citiesActions","fetchCities","props","dispatch","getState","get","then","response","data","success","type","payload","history","push","fetchSingleCity","id","findCity","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,aAAa,GAAG;AAElBC,EAAAA,WAAW,EAAE,qBAACC,KAAD,EAAW;AACpB,WAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3BL,MAAAA,KAAK,CAACM,GAAN,yDACCC,IADD,CACM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,GACZN,QAAQ,CAAC;AAACO,UAAAA,IAAI,EAAE,cAAP;AAAuBC,UAAAA,OAAO,EAAEJ,QAAQ,CAACC;AAAzC,SAAD,CADI,GAEZL,QAAQ,CAAC;AAACO,UAAAA,IAAI,EAAE,cAAP;AAAuBC,UAAAA,OAAO,EAAET,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AAAhC,SAAD,CAFA;AAAA,OADd;AAKH,KAND;AAOH,GAViB;AAWlBC,EAAAA,eAAe,EAAE,yBAACC,EAAD,EAAKb,KAAL,EAAe;AAC5B,WAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3BL,MAAAA,KAAK,CAACM,GAAN,yDAAgEU,EAAhE,EACCT,IADD,CACM,UAAAC,QAAQ;AAAA,eAAIJ,QAAQ,CAAC;AAACO,UAAAA,IAAI,EAAE,mBAAP;AAA4BC,UAAAA,OAAO,EAAEJ,QAAQ,CAACC;AAA9C,SAAD,CAAZ;AAAA,OADd;AAGH,KAJD;AAKH,GAjBiB;AAkBlBQ,EAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACb,WAAO,UAACd,QAAD,EAAWC,QAAX,EAAwB;AAC3BD,MAAAA,QAAQ,CAAE;AAACO,QAAAA,IAAI,EAAE,WAAP;AAAoBC,QAAAA,OAAO,EAAEM;AAA7B,OAAF,CAAR;AACH,KAFD;AAGH;AAtBiB,CAAtB;AAyBA,eAAejB,aAAf","sourcesContent":["import axios from \"axios\"\r\n\r\nconst citiesActions = {\r\n\r\n    fetchCities: (props) => {\r\n        return (dispatch, getState) => {\r\n            axios.get(`https://mytinerary-dalessio.herokuapp.com/api/cities`)\r\n            .then(response => response.data.success\r\n                ? dispatch({type: 'FETCH_CITIES', payload: response.data})\r\n                : dispatch({type: 'FETCH_CITIES', payload: props.history.push('/error')}))\r\n            // .catch(error => props.push('/serverdown')) \r\n        }\r\n    },\r\n    fetchSingleCity: (id, props) => {\r\n        return (dispatch, getState) => {\r\n            axios.get(`https://mytinerary-dalessio.herokuapp.com/api/city/${id}`)\r\n            .then(response => dispatch({type: 'FETCH_SINGLE_CITY', payload: response.data}))\r\n            // .catch(error => props.push('/serverdown')) \r\n        }\r\n    },\r\n    findCity: (e) => {\r\n        return (dispatch, getState) => {\r\n            dispatch ({type: 'FIND_CITY', payload: e})\r\n        }\r\n    },\r\n}\r\n\r\nexport default citiesActions"]},"metadata":{},"sourceType":"module"}